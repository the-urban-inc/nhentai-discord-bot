import { Client, Command } from '@structures';
import {
    Collection,
    CommandInteraction,
    Message,
    ActionRowBuilder,
    ApplicationCommandType,
    StringSelectMenuBuilder,
    Embed,
    StringSelectMenuInteraction,
    InteractionType,
    CacheType,
    ComponentType,
    EmbedBuilder, 
} from 'discord.js';
import { SUPPORT_SERVER } from '@constants';

const CATEGORIES = {
    qna: ['‚ùî', 'QNA'],
    asmr: ['üëÇ', 'ASMR'],
    games: ['üéÆ', 'Games'],
    general: ['üßª', 'General'],
    images: ['üñºÔ∏è', 'Images'],
    info: ['üìÑ', 'Info'],
    misc: ['üõ†Ô∏è', 'Misc'],
    settings: ['‚öôÔ∏è', 'Settings'],
    owner: ['üîí', 'Owner'],
};

export default class extends Command {
    constructor(client: Client) {
        super(client, {
            name: 'help',
            type: ApplicationCommandType.ChatInput,
            description: 'Shows command list and FAQ (that nobody asks)',
            cooldown: 10000,
        });
    }

    update(category: string, owner: boolean) {
        const menu = new StringSelectMenuBuilder().setCustomId('select');
        for (const c of Object.keys(CATEGORIES).reverse()) {
            if (c === 'owner' && owner) continue;
            menu.spliceOptions(0, 0, {
                label: CATEGORIES[c][1],
                value: c,
                emoji: CATEGORIES[c][0],
                default: c === category,
            });
        }
        return menu;
    }

    async exec(interaction: CommandInteraction) {
        const embeds = new Collection<string, EmbedBuilder>();
        const qna = this.client.embeds
            .default()
            .setTitle('‚ùî\u2000Questions Nobody Asked')
            .setDescription(
                `If you still have questions, [join the support server](${SUPPORT_SERVER}) and ask at #help`
            )
            .addFields([
                {
                    name: 'Where are the n! commands?',
                    value: 'Gone. Completely migrated to slash commands.',
                },
                {
                    name: 'What is the private option and why is it in every commands?',
                    value: "It basically works like DM. No one can see the message the bot sends to you if it's set to True.",
                },
                {
                    name: 'How to view other pages or sort by popularity?',
                    value: 'After typing the query, press TAB to input page number or sort method. Page number is `1` and sort method is `recent` by default.',
                },
                {
                    name: 'What do these buttons do?',
                    value:
                        '‚Ä¢ `<<` / `>>` : Jumps to first/last embed | Jumps to previous/next page on nhentai (only works for home, search, tag, artist, etc. commands)‚ÅΩ*‚Åæ\n' +
                        '‚Ä¢ `<` / `>` : Jumps to previous/next embed | Jumps to previous/next page on nhentai (only works for home, search, tag, artist, etc. commands)‚ÅΩ*‚Åæ\n' +
                        '‚Ä¢ `x of y` : Jumps to specified embed‚ÅΩ*‚Åæ\n' +
                        '‚Ä¢ `Sauce?` : Searches for image source using SauceNAO\n' +
                        '‚Ä¢ `‚ù§Ô∏è` : Adds/Removes a doujin to/from favorites\n' +
                        '‚Ä¢ `üîñ` : Follows/Unfollows a tag/artist/parody/etc.\n' +
                        '‚Ä¢ `üè¥` : Blacklists a tag/artist/parody/etc.\n' +
                        '‚Ä¢ `üì•` : Downloads current doujin\n' +
                        "‚Ä¢ `üóë` : Deletes bot message (and sometimes the user's message)‚ÅΩ*‚Åæ\n" +
                        '(*) **Only the person who used the command can use these buttons** (in the case of messages generated by clicking `Sauce?`, only the person mentioned in the message can use these buttons)',
                },
                {
                    name: 'What about select menus?',
                    value:
                        '`Info View` / `Thumbnail View` / `Preview`: Toggles between text mode (with tags infos, artists infos, etc.)/big images mode/start reading the doujin.\n' +
                        'For `g` and `random` commands, `Thumbnail View` actually means start reading.\n' +
                        'Note: **Only the person who used the command can use these select menus**',
                },
                {
                    name: "What's the saucenao thing I see when clicking on Apps in messages?",
                    value: "You can search for the message's image sauce there. It's basically an easy way to call sauce command.\nThe navigation rules still apply normally.\nThe bot will prioritize the link inside the message, then the first message attachment, then the first image in embeds.",
                },
                {
                    name: 'What does following a tag/artist/parody/etc. mean?',
                    value: "It's a feature that notifies you through DM when a new doujin with a tag you followed was released. You have to allow DMs for it to work (obviously).",
                },
                {
                    name: 'Why sometimes images are not showing?',
                    value:
                        'There are many possible reasons:\n' +
                        '‚Ä¢ The media you are viewing contains a banned tag. The bot decided to omit the images to protect the server and itself. You can still unlock them by using the `danger` command. The bot owner will not take any responsibilities if this caused your server to get banned.\nRead [Discord Community Guidelines](https://discord.com/guidelines) for more info. TL;DR: loli, shota, guro.\n' +
                        '‚Ä¢ You blacklisted one of the tags.\n' +
                        '‚Ä¢ Discord AI deems this media unfit to display on Discord.\n' +
                        '‚Ä¢ Image link is dead.\n' +
                        '‚Ä¢ Your internet sucks.\n' +
                        'Note: It is obviously impossible to `Preview` a doujin with banned tags.',
                },
                {
                    name: 'Why sometimes the bot just stopped working?',
                    value:
                        'Again, there are many possible reasons:\n' +
                        "‚Ä¢ If it's only the buttons that didn't work, it could be that no buttons were clicked in that message for more than 3-5 minutes, so the bot just stopped listening.\n" +
                        '‚Ä¢ A new update just came out and the bot needed to restart to apply new changes.\n' +
                        `However, if you are sure those were not the cases, [join the support server](${SUPPORT_SERVER}) to report the issue.`,
                },
            ]);
        embeds.set('qna', qna);
        for (const [category, commandNames] of this.client.categories.entries()) {
            if (category === 'owner' && interaction.user.id !== this.client.ownerID) continue;
            const commands = commandNames.map(c => this.client.commands.get(c).data);
            const embed = this.client.embeds
                .default()
                .setTitle(CATEGORIES[category].join('\u2000'))
                .setDescription(
                    'Note: All commands are slash commands, a feature Discord [introduced](https://blog.discord.com/slash-commands-are-here-8db0a385d9e6) not long ago. Commands with the `üîû` icon are NSFW commands and can only be used in NSFW channels.'
                )
                .addFields([
                    {
                        name: 'Commands',
                        value: commands.map(c => `${c.nsfw ? '`üîû ' : '`'}${c.name}\``).join(' '),
                    },
                    {
                        name: 'Confused?',
                        value: `Check out the QNA page!\nIf you still have questions, [join the support server](${SUPPORT_SERVER})`,
                    },
                ]);
            embeds.set(category, embed);
        }
        let menu = this.update('general', interaction.user.id === this.client.ownerID);
        menu.setCustomId(`${interaction.id}${menu.data.custom_id}`);
        const message = (await interaction.editReply({
            embeds: [embeds.get('general')],
            components: [new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(menu)],
        })) as Message;
        const collector = message.createMessageComponentCollector({
            componentType: ComponentType.StringSelect,
            filter: i => i.user.id === interaction.user.id,
            time: 300_000,
        });
        collector.on('collect', async i => {
            if (!i.customId.startsWith(interaction.id)) return;
            await i.deferUpdate();
            const category = i.values[0];
            menu = this.update(category, interaction.user.id === this.client.ownerID);
            menu.setCustomId(`${interaction.id}${menu.data.custom_id}`);
            await interaction.editReply({
                embeds: [embeds.get(category)],
                components: [new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(menu)],
            });
        });
    }
}
